# -*- coding: utf-8 -*-
"""Naive_Bayes_Recipe_Classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UM0IUBxpgV1VYBE0Nq5oDE1gJRcMl8XB

# <center>Naive Bayes - Recipe Classification</center>
"""

import os
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

dataset=pd.read_csv("C:/Users/Shrey Kadam/OneDrive/Sem 5/DWM/recipe_dataset/food_recipes.csv")
dataset.head(5)

dataset.columns

dataset.info(memory_usage='deep')
#inference--> 
## 1.only 2 columns are of numeric dtype
## 2.almost half of features have null values

df = dataset.copy()
df.drop(columns = ['url', 'record_health', 'vote_count', 'rating','description', 'cuisine', 'course',
                   'prep_time', 'cook_time','instructions', 'author', 'tags', 'category'], inplace = True)
df

df.nunique()
#inference-->
## 1.Unwanted columns, all tuples have same value
## 2.only 328 users

diet_type = df.diet.value_counts(sort=True, dropna=False).reset_index()
diet_type.columns = ['diet type', 'number of recipes']
diet_type

diet_na = df[df['diet'].isnull()].copy()

diet_na['ingredients'] = diet_na.ingredients.str.split('|')
diet_na.reset_index(drop = True, inplace = True)

diet_na

item = ['Diabetic Friendly', 'No Onion No Garlic (Sattvic)', 'Vegan', 'Gluten Free', 'Sugar Free Diet']
for i in item:
    indexnames = df[df['diet'] == i].index
    df.drop(indexnames, inplace = True)
df.dropna(inplace = True)   
df

df.replace(to_replace =['Eggetarian', 'High Protein Non Vegetarian', 'Non Vegeterian'], value ='Non Vegetarian', inplace = True)
df.replace(to_replace ='High Protein Vegetarian', value ='Vegetarian', inplace = True)
df

d_type = df.diet.value_counts(sort=True, dropna=False).reset_index()
d_type.columns = ['diet type', 'number of recipes']
d_type

diet_na.loc[0]

#the dishes DataFrame will contain our first 8 entries from the example
dishes = df.copy()

# our new dish stored as list
new_dish = diet_na.loc[0, 'ingredients']

#turn the items in each dish into a list
dishes['ingredients'] = dishes['ingredients'].str.split('|')

#iterate through the lists and put each item in an items list
items = []
for dish in dishes['ingredients']:
    for item in dish:
        items.append(item)
        
#return a list of only the unique items       
unique_items = list(set(items))

#get the number of unique items to use later
total_unique_items = len(unique_items)

#seperate the vegetarian items into their own DataFrame
veg = dishes[dishes['diet'] == 'Vegetarian']

#create a list of all items classified as Vegetarian
all_veg_items = []
for dish in veg['ingredients']:
    for item in dish:
        all_veg_items.append(item)
    
#get the number of Vegetarian items to use later
total_veg_items = len(all_veg_items)

#create a frequency table for all Vegetarian items
veg_counts = {}
for item in all_veg_items:
    if item in veg_counts:
        veg_counts[item] += 1
    else:
        veg_counts[item] = 1
    
#seperate Not Vegetarian items into their own DataFrame
not_veg = dishes[dishes['diet'] != 'Vegetarian']

#create a list of items Classified as Not Vegetarian
all_not_veg_items = []
for dish in not_veg['ingredients']:
    for item in dish:
        all_not_veg_items.append(item)
        
#get a total count of Not Vegetarian items    
total_not_veg_items = len(all_not_veg_items) 

print(all_not_veg_items)

#the dishes DataFrame will contain our first 8 entries from the example
dishes = df.copy()

# our new dish stored as list
new_dish = diet_na.loc[0, 'ingredients']
print(new_dish)
#turn the items in each dish into a list
dishes['ingredients'] = dishes['ingredients'].str.split('|')

#iterate through the lists and put each item in an items list
items = []
for dish in dishes['ingredients']:
    for item in dish:
        items.append(item)
        
#return a list of only the unique items       
unique_items = list(set(items))

#get the number of unique items to use later
total_unique_items = len(unique_items)

#seperate the vegetarian items into their own DataFrame
veg = dishes[dishes['diet'] == 'Vegetarian']

#create a list of all items classified as Vegetarian
all_veg_items = []
for dish in veg['ingredients']:
    for item in dish:
        all_veg_items.append(item)
    
#get the number of Vegetarian items to use later
total_veg_items = len(all_veg_items)

#create a frequency table for all Vegetarian items
veg_counts = {}
for item in all_veg_items:
    if item in veg_counts:
        veg_counts[item] += 1
    else:
        veg_counts[item] = 1
    
#seperate Not Vegetarian items into their own DataFrame
not_veg = dishes[dishes['diet'] != 'Vegetarian']

#create a list of items Classified as Not Vegetarian
all_not_veg_items = []
for dish in not_veg['ingredients']:
    for item in dish:
        all_not_veg_items.append(item)
        
#get a total count of Not Vegetarian items    
total_not_veg_items = len(all_not_veg_items) 

#create a frequency table to count Not Vegetarian items
not_veg_counts = {}
for item in all_not_veg_items:
    if item in not_veg_counts:
        not_veg_counts[item] += 1
    else:
        not_veg_counts[item] = 1

#find the probabilities of Vegetarian and Not Vegetarian
cat_percentages = dishes['diet'].value_counts(normalize = True)
p_veg = cat_percentages['Vegetarian']
p_not_veg = cat_percentages['Non Vegetarian']

#find the naive probability of the dish given Vegetarian
p_dish_veg = 1
for item in new_dish:
    item_count = veg_counts[item]
    prob_item = (item_count + 1) / (total_veg_items + (1 * total_unique_items))
    p_dish_veg *= prob_item

#find the naive probability of the dish given Not Vegetarian
p_dish_not_veg = 1
for item in new_dish:
    item_count = not_veg_counts[item]
    prob_item = (item_count + 1) / (total_not_veg_items + (1 * total_unique_items))
    p_dish_not_veg *= prob_item

#find the proportional probabilites of Vegetarian and Not Vegetarian given the new dish           
p_veg_given_dish = p_dish_veg * p_veg
p_not_veg_given_dish =  p_dish_not_veg * p_not_veg

# use and if statement to classify the dish as Vegetarian or Not Vegetarian
if p_veg_given_dish > p_not_veg_given_dish:
    print("Vegetarian")
elif p_veg_given_dish < p_not_veg_given_dish : 
    print("Non Vegetarian")
else:
    print("We'll need to help of a human to classify this")

